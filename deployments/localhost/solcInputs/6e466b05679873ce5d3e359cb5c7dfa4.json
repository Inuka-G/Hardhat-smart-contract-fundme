{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n// solhint-disable-next-line interface-starts-with-i\r\ninterface AggregatorV3Interface {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function description() external view returns (string memory);\r\n\r\n    function version() external view returns (uint256);\r\n\r\n    function getRoundData(\r\n        uint80 _roundId\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n\r\n    function latestRoundData()\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n}\r\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.26;\r\nimport \"./PriceConverter.sol\";\r\nerror fundMe__NotOwner();\r\n\r\n/**\r\n * @title FundMe\r\n * @dev The FundMe contract has a minimum value of 50 USD to fund the contract.\r\n *\r\n * @author inukaG on behalf of Axion chain labs\r\n */\r\ncontract FundMe {\r\n    using PriceConverter for uint256;\r\n    uint256 public constant MININUM_USD_VALUE = 50 * 1e18;\r\n    address[] public funders;\r\n    mapping(address => uint256) addressToAmount;\r\n    address public immutable i_owner;\r\n    AggregatorV3Interface public priceFeedContract;\r\n\r\n    constructor(address networkAddress) {\r\n        priceFeedContract = AggregatorV3Interface(networkAddress);\r\n\r\n        i_owner = msg.sender;\r\n    }\r\n\r\n    function fund() public payable {\r\n        require(\r\n            msg.value.getConversionRate(priceFeedContract) >= MININUM_USD_VALUE,\r\n            \"Didnt sent enough ETH\"\r\n        );\r\n        funders.push(msg.sender);\r\n        addressToAmount[msg.sender] = msg.value;\r\n    }\r\n\r\n    function widthDraw() public onlyOwner {\r\n        for (uint i = 0; i < funders.length; i++) {\r\n            address funderAddress = funders[i];\r\n            addressToAmount[funderAddress] = 0;\r\n        }\r\n        funders = new address[](0);\r\n        // withdraw the balance to the owner\r\n        // -----------------------------------------\r\n        // msg.sender is the address that call the widthDraw function\r\n        // address(this).balance is the balance(funds) of the contract\r\n        // 3 ways can transfer native currency to a address\r\n        // // transfer\r\n        // payable(msg.sender.transfer(address(this).balance));\r\n        // // send\r\n        // bool isSuccess = payable(msg.sender.send(address(this).balance));\r\n        // require(isSuccess, \"Failed to send the funds\");\r\n        // call\r\n        (bool isSucessCall, ) = (\r\n            msg.sender.call{value: address(this).balance}(\"\")\r\n        );\r\n        require(isSucessCall, \"Failed to send the funds\");\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        // require(msg.sender == i_owner, \"You are not the owner\");\r\n\r\n        // for more gas optimization use this\r\n        if (msg.sender != i_owner) revert fundMe__NotOwner();\r\n        _;\r\n    }\r\n\r\n    // route to fund() function\r\n    receive() external payable {\r\n        fund();\r\n    }\r\n\r\n    fallback() external payable {\r\n        fund();\r\n    }\r\n}\r\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.26;\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\nlibrary PriceConverter {\r\n    function getPrice(\r\n        AggregatorV3Interface priceFeed\r\n    ) public returns (uint256) {\r\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\r\n        return uint256(answer * 1e10);\r\n    }\r\n\r\n    function getConversionRate(\r\n        uint256 ammountETH,\r\n        AggregatorV3Interface priceFeed\r\n    ) internal returns (uint256) {\r\n        uint256 priceOfEth = getPrice(priceFeed);\r\n\r\n        return (ammountETH * priceOfEth) / 1e18;\r\n    }\r\n\r\n    function getVersion(\r\n        AggregatorV3Interface priceFeed\r\n    ) public returns (uint256) {\r\n        return priceFeed.version();\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}